WEBVTT

1
00:00:00.000 --> 00:00:09.522
Now for a short demonstration of the WebSocket functionality of our feedback app ARSnova.

2
00:00:09.522 --> 00:00:20.922
This demo shows two different browsers running ARSnova in the role of student. Two different students are shown.

3
00:00:21.172 --> 00:00:24.482
As you can see, there's quite some traffic, not generated by current MOOC participants,

4
00:00:27.802 --> 00:00:43.682
but I have used Apache JMeter, a load generation and performance tool we have already used in Web Engineering I.

5
00:00:43.682 --> 00:00:57.362
As you can see, the tool generates virtual users who take different roles and perform different actions at the same time.

6
00:00:57.612 --> 00:01:05.722
Those virtual users generate the load in the background we see visualized as bar charts.

7
00:01:05.972 --> 00:01:12.922
Now, how can we perceive WebSocket behavior?

8
00:01:13.172 --> 00:01:23.442
The fact that the bars are updated synchronously is simply due to the use of AJAX in the first place.

9
00:01:23.692 --> 00:01:37.202
That means, XML HTTP requests are send to to the backend to get the current feedback votes.

10
00:01:37.452 --> 00:01:54.042
As soon as I click on a smiley in a browser, you'll see that the respective bar is incremented by one and this happens synchronously in all browser windows.

11
00:01:54.292 --> 00:01:59.602
If I had two mice, I could have done that in both browsers at the same time (just kidding).

12
00:01:59.852 --> 00:02:05.362
You see, the app reacts in real time.

13
00:02:05.612 --> 00:02:17.122
The same is true in the other browser. And in the background, the virtual Apache JMeter users do their job.

14
00:02:17.372 --> 00:02:26.682
When designing ARSnova, we came to the conclusion that we would have to build a WebSocket connection.

15
00:02:26.932 --> 00:02:38.432
In a live session with 10 student developers who used a feedback system in conventional technique,

16
00:02:39.372 --> 00:02:53.242
we found that they didn't have the feeling that their feedback was counted because Polling or Long Polling always causes delays.

17
00:02:53.492 --> 00:03:07.642
Due to the utilization of the network, the WLAN capacity and the access point we eventually could poll only every few minutes.

18
00:03:07.892 --> 00:03:13.842
So that when clicking on a smiley, the reaction of the system was far from immediate.

19
00:03:14.092 --> 00:03:20.842
The user experience of such a system is very poor.

20
00:03:21.092 --> 00:03:28.562
So we started to think about new technologies and at that time, WebSockets came up.

21
00:03:28.812 --> 00:03:38.882
That was some years ago, Google started to implement WebSockets in Google Chrome, followed by Firefox and Safari ...

22
00:03:39.132 --> 00:03:42.632
Today, all modern browsers support WebSocket.

