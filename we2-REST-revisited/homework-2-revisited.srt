0
00:00:00,000 --> 00:00:04,802
Now, let's review homework #2.

1
00:00:05,052 --> 00:00:21,002
The assignment: Reverse engineering the ARSnova REST API based on the use cases described in the ARSnova manual.

2
00:00:21,252 --> 00:00:38,002
That is: Going through all the use cases one by one and trying to indentify the main domain objects or resources,

3
00:00:38,252 --> 00:00:53,082
finding out what HTTP request and the responses. 
And of course, the central question: Is the ARSnova API RESTful?

4
00:00:53,332 --> 00:00:58,642
Let's have a look at what went right and what went wrong.

5
00:01:00,642 --> 00:01:13,802
It was my intention to have you study and understand the REST architecture by analyzing a running app 

6
00:01:14,052 --> 00:01:17,552
rather than by having you program a simple "Hello World" app.

7
00:01:17,802 --> 00:01:31,685
that tries to implement all REST constraints by writing some lines of code.

8
00:01:31,935 --> 00:01:35,435


9
00:01:35,685 --> 00:01:40,562
As mentioned before, the central question was:
Is ARSnova RESTful?

10
00:01:40,812 --> 00:01:44,682
You can answer this question only if you know all 6 REST constraints 

11
00:01:44,932 --> 00:01:58,402
and if have understood a principle thatis at the heart of the Uniform Interface constraint:
HATEOAS

12
00:01:58,652 --> 00:02:06,882
We have discussed this principle extensively in the chapter on REST and you will find all the text sources there to recapitulate.

13
00:02:10,632 --> 00:02:32,922
There, we have defined HATEOAS - Hypermedia as the Engine of Application State - as the central requirement for web development according to Roy Fielding.

14
00:02:36,172 --> 00:02:45,282
In case it is not quite clear yet, I recommend reading the text sources again, if need be for a second time.

15
00:02:45,532 --> 00:02:56,722
Here is an example of an good analysis that goes into quite some detail but misses out on the HATEOAS criterion.

16
00:02:56,972 --> 00:03:00,472
Let's have a closer look:

17
00:03:00,722 --> 00:03:10,562
The analysis shows that the student has extensively studied the constraints of the REST API 

18
00:03:10,812 --> 00:03:19,762
all 6 constraints are listed and evaluated,

19
00:03:20,012 --> 00:03:24,242
starting with the client-server constraint right through to the uniform interface constraint.

20
00:03:24,492 --> 00:03:37,122
The analysis is not quite decisive about whether the ARSnova API is restful or not

21
00:03:37,372 --> 00:03:46,402
This doubt is due to the fact that the decisive criterion was not examined.

22
00:03:46,652 --> 00:04:18,122
That is, it doesn't analyze if the representations of the domain objects, i.e. the JSON objects, contain Hyperlinks that refer to a possible next state of the application.

23
00:04:18,372 --> 00:04:24,282
And if you analyzed the JSON objects, you will seen that there are no hyperlinks at all.

24
00:04:24,532 --> 00:04:31,642
The developers didn't consider the HATEOAS principle at all.

25
00:04:31,892 --> 00:04:37,392
Well, it wasn't really necessary because the application didn't require it.

26
00:04:37,642 --> 00:04:54,042
The REST client you'll develop during this course, however, should change its application state according to the HATEOAS principle.

27
00:04:54,292 --> 00:04:57,792
Let's walk through homework #2

28
00:04:58,042 --> 00:05:05,242
As a teacher on iversity, I can view the homework again.

29
00:05:05,492 --> 00:05:11,162
And that's what I will do now.

30
00:05:11,412 --> 00:05:18,682


31
00:05:18,932 --> 00:05:22,432
Here are the questions again.

32
00:05:22,682 --> 00:05:38,162
1. Identify and name the main resources (i.e. the domain objects) of the ARSnova web interface.

33
00:05:39,162 --> 00:05:49,122
2. List the complete URLs/URIs of those main resources.

34
00:05:49,372 --> 00:05:57,362
3. Find the methods that are used on those resources.

35
00:05:57,612 --> 00:06:06,162
That is, find them all, not by chance but by walking through all the uses cases.

36
00:06:06,412 --> 00:06:10,722
with the help of the ARSnova manual.

37
00:06:10,972 --> 00:06:18,802
4. The response codes were easy to identify.

38
00:06:22,802 --> 00:06:28,602
5. The type of representation of the main resources ...

39
00:06:28,852 --> 00:06:35,162
... there were only one or two, text/plain was one of them

40
00:06:35,412 --> 00:06:43,682
However, the text/plain MIME type doesn't correspond to one of the main resources.

41
00:06:43,932 --> 00:06:47,432
Und again the main question:

42
00:06:47,682 --> 00:06:51,182
Is ARSnova RESTful?

43
00:06:51,432 --> 00:06:56,322


44
00:06:56,572 --> 00:07:00,072
Here is the assignment in detail:

45
00:07:00,322 --> 00:07:03,822
To find the right answers to these questions, you need the ARSnova manual. Without the manual, the assignment doesn't make sense.

46
00:07:04,072 --> 00:07:07,642
We are in the lucky position to have such a manual.

47
00:07:07,892 --> 00:07:13,842
das wurde ja auch vor der hausaufgabe deutlich formuliert.

48
00:07:14,092 --> 00:07:17,882
What are the main resources?

49
00:07:18,132 --> 00:07:23,922
The application domain of ARSnova is one that you can easily understand.

50
00:07:24,172 --> 00:07:29,562
because you can assume the role of a domain expert

51
00:07:29,812 --> 00:07:38,162
There are students (the audience) and lecturers (teachers).

52
00:07:38,412 --> 00:07:41,912
Why does the client want such an app?

53
00:07:42,162 --> 00:07:48,962
The aim is to get anonymous feedback from the students

54
00:07:49,212 --> 00:07:52,842
check the students' knowledge levels

55
00:07:53,092 --> 00:08:02,000
be able to adapt the lecture depending on feedback and students' questions etc.

56
00:08:02,250 --> 00:08:10,002
Since you belong to the target group of the app, you shouldn't be overly burdened with the task.

57
00:08:10,252 --> 00:08:15,442
Question 1: Now, what are the main resources?
You have already seen some of them in the table ...

58
00:08:15,692 --> 00:08:19,192
but the table is not complete ...
I counted 7 main resources.

59
00:08:19,442 --> 00:08:22,942
As peer reviewers you have already seen the solutions:

60
00:08:23,192 --> 00:08:26,692
- Session

61
00:08:30,692 --> 00:08:34,192
- Preparation questions
- Lecture questions

62
00:08:34,442 --> 00:08:37,942
- Answers to preparation questions and lecture questions

63
00:08:42,492 --> 00:08:49,992
- Interposed questions (from the audience)

64
00:08:45,192 --> 00:08:50,242
- Feedback

65
00:08:50,992 --> 00:08:55,492
But careful - Feedback doesn't really belong here

66
00:08:55,742 --> 00:09:01,602
There is a discussion task on the iversity platform

67
00:09:01,852 --> 00:09:09,322
Have a look at the discussion to find out why Feedback isn't an HTTP resource

68
00:09:09,572 --> 00:09:15,842
due to the way ARSnova was implemented on the backend.

69
00:09:16,092 --> 00:09:20,562
There is one more resource: - Statistics

70
00:09:20,812 --> 00:09:26,722
Question 2: Once you know the resources, you can easily find the correspondig URIs.

71
00:09:26,972 --> 00:09:30,472
You will notice that there are some cryptical signs at the end of the URIs, an underscore followed by a number

72
00:09:30,722 --> 00:09:47,162
_dc followed by something like a timestamp ...
We have posted a question regarding this "annex" in the respective unit

73
00:09:47,412 --> 00:09:54,722
Is it a cookie, a security token or something else? Have a look.

74
00:09:54,972 --> 00:09:58,472
Question 3: What methods are used?

75
00:09:58,722 --> 00:10:07,762
Answer: GET, POST, PUT and DELETE.

76
00:10:08,012 --> 00:10:14,082
Question 4: What are the positive status codes?

77
00:10:14,332 --> 00:10:17,832
This question leaves out the status codes that refer to server errors on the backend

78
00:10:18,082 --> 00:10:33,842
or errors on the client side, e.g. if the resource doesn't exist (error 404) or if the client is not authenticated.

79
00:10:34,092 --> 00:10:40,602
There are quite a few but I won't mention them here.

80
00:10:40,852 --> 00:10:46,352
Question 5: What is the representation type of the main resources?
Answer: JSON

81
00:10:46,602 --> 00:10:57,682
In Javascript application JSON is the data transfer format of choice, anyway.

82
00:10:57,932 --> 00:11:04,362
Question 6: Is ARSnova RESTful?

83
00:11:04,612 --> 00:11:08,112
No, it isn't. We had already answered that question.

84
00:11:08,362 --> 00:11:17,002
There was some discussion as to whether the statelessness constraint might be violated

85
00:11:17,252 --> 00:11:22,522
because ARSnova uses a cookie - a Java session ID.

86
00:11:22,772 --> 00:11:32,122
The counter-argument is that some sort of authentication and authorisation is necessary

87
00:11:32,372 --> 00:11:38,602
to prevent that anybody can access the app.

88
00:11:38,852 --> 00:11:46,882
Therefore, this cookie is absolutely necessary and it isn't used to manage information about the application state.

89
00:11:47,132 --> 00:11:58,402
The cookie doesn't contain any information about the state of the client.

90
00:11:58,652 --> 00:12:08,002
No information about the client is sent to the server. We just need an authentication frame

91
00:12:08,252 --> 00:12:11,752
that is implemented via the backend Spring framework (which is implemented in Java), 

92
00:12:12,002 --> 00:12:19,502
It is a security frame to prevent any malicious attacks.

93
00:12:19,502 --> 00:12:27,322
The application state, however, is not managed on the server side.

94
00:12:27,572 --> 00:12:41,362
Der verstoÃŸ istdas nichteinhalten des HATEOAS kriteriums.

